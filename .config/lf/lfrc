&[ $LF_LEVEL -eq 1 ] || lf -remote "send $id echoerr \"Warning: You're in a nested lf instance!\""


# =====================
# === self settings ===
# =====================

# ===
# === settings
# ===
set number
set relativenumber
set icons
set incsearch
set incfilter
set smartcase
set sixel true
set scrolloff 1
set mouse
set period 1
set info size
set dircounts

# === engines
source ~/.config/lf/lfrc.opener
set previewer ~/.config/lf/scripts/previewer
set cleaner ~/.config/lf/scripts/cleaner

# ===
# === keymaps
# ===
map p :paste; clear
map <c-g> &{{
    if [ "$(uname)" = 'Darwin' ]; then
        open -a yoink $fx
    else
        dragon -a -x $fx
    fi
}}
map <c-s> ${{
    miniserve . -qu
}}
# map R :reload
map i $~/.config/lf/scripts/previewer $f | $PAGER

cmd chmod %{{
    printf "Change permission: "
    read ans
    chmod $ans $fx
    lf -remote "send $id :unselect"
    lf -remote "send $id :reload"
}}
map + :chmod


# =====================
# === Tips settings ===
# =====================
# https://github.com/gokcehan/lf/wiki/Tips

cmd edit-config ${{
    # $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}
map <C-r> edit-config

set cursorpreviewfmt "\033[7m"

cmd move-parent &{{
    dironly="setlocal '$(dirname "$PWD")' dironly"
    lf -remote "send $id :updir; $dironly true; $1; $dironly false; open"
}}
map J move-parent down
map K move-parent up

cmd create %{{
    printf "Create: "
    read ans
    if [[ "$ans" == */ ]]; then
        mkdir -p "$ans"
    else
        mkdir -p "$(dirname "$ans")"
        touch "$ans"
    fi
    lf -remote "send $id select \"$ans\""
}}
map a create

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

map r
map rr :rename
map ri :rename; cmd-home
map ra :rename; cmd-end
map rc :rename; cmd-end; cmd-delete-home

cmd follow-link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}
map gL follow-link

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy)
            # ln -sr -t . -- "$@"
            ~/.config/lf/scripts/linker "$@"
            ;;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}
map P :link

cmd yank-dirname ${{
    if [ "$(uname)" = 'Darwin' ]; then
        dirname -- "$f" | tr -d '\n' | pbcopy
    else
        dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
    fi
}}
cmd yank-path ${{
    if [ "$(uname)" = 'Darwin' ]; then
        printf '%s' "$f" | pbcopy
    else
        printf '%s' "$f" | xclip -i -selection clipboard
    fi
}}
cmd yank-basename ${{
    if [ "$(uname)" = 'Darwin' ]; then
        basename -- "$f" | tr -d '\n' | pbcopy
    else
        basename -- "$f" | head -c-1 | xclip -i -selection clipboard
    fi
}}
cmd yank-basename-without-extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' |
      if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
      xclip -i -selection clipboard
}}
# map y
# map yy :copy
# map yd :yank-dirname
# map yp :yank-path
# map yb :yank-basename
# map d
# map dd :cut
map gd :yank-dirname
map gp :yank-path
map gb :yank-basename

map . :read; cmd-history-prev; cmd-enter

cmd select-files &{{
    get_files() {
        if [ "$lf_hidden" = 'false' ]; then
            find "$PWD" -mindepth 1 -maxdepth 1 -type f -not -name '.*' -print0
        else
            find "$PWD" -mindepth 1 -maxdepth 1 -type f -print0
        fi |
        xargs -0 printf ' %q'
    }

    lf -remote "send $id :unselect; toggle $(get_files)"
}}
cmd select-dirs &{{
    get_dirs() {
        if [ "$lf_hidden" = 'false' ]; then
            find "$PWD" -mindepth 1 -maxdepth 1 -type d -not -name '.*' -print0
        else
            find "$PWD" -mindepth 1 -maxdepth 1 -type d -print0
        fi |
        xargs -0 printf ' %q'
    }

    lf -remote "send $id :unselect; toggle $(get_dirs)"
}}

cmd bookmark-create %{{
    LF_BOOKMARK_PATH=~/.local/share/lf/bookmarks
    mkdir -p "$LF_BOOKMARK_PATH"
    printf "Mark current path to (string): "
    read ans
    if [ -z "$ans" ]; then
        lf -remote "send $id reload"
        exit 0
    fi
    for f in "$LF_BOOKMARK_PATH"/*; do
        if [ ! -f "$f" ]; then
            continue
        fi
        target_path="$(cat "$f")"
        if [ ! -d "$target_path" ] || [ "$PWD" = "$target_path" ]; then
            rm "$f"
        fi
    done
    echo "$PWD" > "${LF_BOOKMARK_PATH}/${ans}"
    lf -remote "send $id reload"
}}
cmd bookmark-jump ${{
    LF_BOOKMARK_PATH=~/.local/share/lf/bookmarks
    mkdir -p "$LF_BOOKMARK_PATH"
    target_mark="$(ls "$LF_BOOKMARK_PATH" | fzf || exit 0)"
    if [ -z "$target_mark" ]; then
        exit 0
    fi
    target_path="$(cat "${LF_BOOKMARK_PATH}/${target_mark}" 2> /dev/null)"
    if [ ! -d "$target_path" ]; then
        rm "${LF_BOOKMARK_PATH}/${target_mark}"
        lf -remote "send $id echo \"Path not found, Removed from bookmarks.\""
        exit 0
    fi
    lf -remote "send $id cd \"$target_path\""
}}
cmd bookmark-remove ${{
    LF_BOOKMARK_PATH=~/.local/share/lf/bookmarks
    mkdir -p "$LF_BOOKMARK_PATH"
    target_mark="$(ls "$LF_BOOKMARK_PATH" | fzf || exit 0)"
    if [ -z "$target_mark" ]; then
        exit 0
    fi
    rm "${LF_BOOKMARK_PATH}/${target_mark}" 2> /dev/null
}}
cmd bookmark-remove-current-path ${{
    LF_BOOKMARK_PATH=~/.local/share/lf/bookmarks
    [ ! -d "$LF_BOOKMARK_PATH" ] && exit 0
    for f in "$LF_BOOKMARK_PATH"/*; do
        if [ ! -f "$f" ]; then
            continue
        fi
        if [ "$PWD" = "$(cat "$f")" ]; then
            rm "$f"
        fi
    done
}}
cmd bookmark-remove-not-exist ${{
    LF_BOOKMARK_PATH=~/.local/share/lf/bookmarks
    [ ! -d "$LF_BOOKMARK_PATH" ] && exit 0
    for f in "$LF_BOOKMARK_PATH"/*; do
        if [ ! -f "$f" ]; then
            continue
        fi
        if [ ! -d "$(cat "$f")" ]; then
            rm "$f"
        fi
    done
}}
cmd bookmark-remove-all ${{
    LF_BOOKMARK_PATH=~/.local/share/lf/bookmarks
    rm -rf "$LF_BOOKMARK_PATH" 2> /dev/null
}}
map m
map mm bookmark-create
map ` bookmark-jump
map mM bookmark-remove
map <a-m> bookmark-remove-current-path
map <a-'> bookmark-remove-not-exist
map <a-"> bookmark-remove-all

cmd z %{{
    printf "Zoxide goto: "
    read ans
    result="$(zoxide query --exclude $PWD "$ans" | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
    lf -remote "send clear"
}}
cmd zi ${{
    result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}
cmd on-cd &{{
    zoxide add "$PWD"
}}
map zz z
map zi zi


# ========================
# === Default settings ===
# ========================

# interpreter for shell commands
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
# set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
# set cursorpreviewfmt "\033[7;2m"

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
# map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &{{
    if [ "$(uname)" = 'Darwin' ]; then
        open $f
    else
        mimeopen $f
    fi
}}
map O $mimeopen --ask $f

# mkdir command. See wiki if you want it to select created dir
# map a :push %mkdir<space>

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    # case $f in
    #     *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
    #     *.tar.gz|*.tgz) tar xzvf $f;;
    #     *.tar.xz|*.txz) tar xJvf $f;;
    #     *.zip) unzip $f;;
    #     *.rar) unrar x $f;;
    #     *.7z) 7z x $f;;
    # esac
    atool -x $f
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
