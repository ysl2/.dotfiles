#!/bin/bash

# Script for installing tmux on systems where you don't have root access.
# tmux will be installed in ${PREFIX}/bin.
# It's assumed that wget -c and a C/C++ compiler are installed.

# exit on error
set -e

PREFIX=$HOME/.vocal
mkdir -p "$PREFIX"
TEMP_FOLDER=$HOME/Downloads/_

#GHPROXY=https://mirror.ghproxy.com/
GHPROXY=
#GHSSH=git.zhlh6.cn
GHSSH=github.com
APP_FOLDER=~/.local/share/applications

# create our directories
mkdir -p ${PREFIX} ${TEMP_FOLDER}


_ERR () {
    echo "Bug here: $1"
}


openssl () {
    [[ -e ${PREFIX}/lib64/pkgconfig/openssl.pc ]] || [[ -e ${PREFIX}/lib/pkgconfig/openssl.pc ]] && return

    cd ${TEMP_FOLDER}

    # OPENSSL_VERSION=3.1.0
    # OPENSSL_VERSION=1.1.1t
    OPENSSL_VERSION=$(ssh -V 2>&1 | awk '{ print $4 }')
    if [[ ${OPENSSL_VERSION:0:1} == '3' ]]; then
        OPENSSL_VERSION=openssl-${OPENSSL_VERSION}
    elif [[ ${OPENSSL_VERSION:0:1} == '1' ]]; then
        OPENSSL_VERSION=OpenSSL_${OPENSSL_VERSION//./_}
    fi

    [[ ! -e openssl ]] && git clone -b ${OPENSSL_VERSION} --depth=1 https://gitee.com/mirrors/openssl.git
    cd openssl
    ./config shared --prefix=${PREFIX} --openssldir=${PREFIX}/ssl
    make
    make install
    make clean
    cd ..
    [[ -e ${PREFIX}/ssl/certs ]] && rm -rf ${PREFIX}/ssl/certs
    ln -s /etc/ssl/certs ${PREFIX}/ssl/certs
}


libevent () {
    [[ -e ${PREFIX}/lib/pkgconfig/libevent.pc ]] && return

    cd ${TEMP_FOLDER}

    # openssl

    LIBEVENT_VERSION=2.1.12-stable
    [[ ! -e libevent-${LIBEVENT_VERSION}.tar.gz ]] && wget -c https://ghproxy.com/https://github.com/libevent/libevent/releases/download/release-${LIBEVENT_VERSION}/libevent-${LIBEVENT_VERSION}.tar.gz
    tar xvzf libevent-${LIBEVENT_VERSION}.tar.gz
    cd libevent-${LIBEVENT_VERSION}
    # Need to install pkg-config: sudo apt install pkg-config
    # ./configure PKG_CONFIG_PATH=${PREFIX}/lib64/pkgconfig --prefix=${PREFIX} --disable-shared
    ./configure \
        CFLAGS="-I${PREFIX}/include -I${PREFIX}/include/openssl" \
        LDFLAGS="-L${PREFIX}/lib -L${PREFIX}/lib64" \
        --prefix=${PREFIX}
    make
    make install
    make clean
}


ncurses () {
    _ncurses () {
        NCURSES_VERSION=$1

        [[ -e ${PREFIX}/lib/libncurses.so.${NCURSES_VERSION} ]] && [[ -e ${PREFIX}/lib/libncursesw.so.${NCURSES_VERSION} ]] && return

        cd ${TEMP_FOLDER}

        [[ ! -e ncurses-${NCURSES_VERSION}.tar.gz ]] && wget -c -O ncurses-${NCURSES_VERSION}.tar.gz https://ghproxy.com/https://github.com/mirror/ncurses/archive/refs/tags/v${NCURSES_VERSION}.tar.gz
        tar xvzf ncurses-${NCURSES_VERSION}.tar.gz
        cd ncurses-${NCURSES_VERSION}
        _CONFIGURE_COMMAND='./configure'
        _CONFIGURE_COMMAND="$_CONFIGURE_COMMAND CPPFLAGS='-P'"
        _CONFIGURE_COMMAND="$_CONFIGURE_COMMAND --with-shared --with-termlib --prefix=${PREFIX}"
        # _CONFIGURE_COMMAND="$_CONFIGURE_COMMAND --disable-tic-depends --with-ticlib"
        _CONFIGURE_COMMAND="$_CONFIGURE_COMMAND --with-versioned-syms"
        if [[ ${1:0:1} == '5' ]]; then
            _CONFIGURE_COMMAND="$_CONFIGURE_COMMAND --without-cxx-binding"  # Ref: https://git.pengutronix.de/cgit/ptxdist/commit/?id=b6036e7ce2ce791087694ca19a771168ac7fc9f6
        fi
        if [[ ! -e ${PREFIX}/lib/libncurses.so.${NCURSES_VERSION} ]]; then
            CONFIGURE_COMMAND=$_CONFIGURE_COMMAND
            CONFIGURE_COMMAND="$_CONFIGURE_COMMAND --disable-widec"
            eval "$CONFIGURE_COMMAND"
            make
            make install
            make clean
        fi
        if [[ ! -e ${PREFIX}/lib/libncursesw.so.${NCURSES_VERSION} ]]; then
            CONFIGURE_COMMAND=$_CONFIGURE_COMMAND
            CONFIGURE_COMMAND="$_CONFIGURE_COMMAND --enable-widec"
            eval "$CONFIGURE_COMMAND"
            make
            make install
            make clean
        fi
    }

    # _ncurses 5.9
    _ncurses 6.4
}


fuse () {
    [[ -e ${PREFIX}/lib/pkgconfig/fuse3.pc ]] && return

    cd ${TEMP_FOLDER}

    pip install meson ninja

    FUSE_VERSION=3.14.1
    [[ ! -e fuse-${FUSE_VERSION}.tar.xz ]] && wget -c https://ghproxy.com/https://github.com/libfuse/libfuse/releases/download/fuse-${FUSE_VERSION}/fuse-${FUSE_VERSION}.tar.xz
    tar xvf fuse-${FUSE_VERSION}.tar.xz
    cd fuse-${FUSE_VERSION}
    mkdir build
    cd build
    meson setup .. \
        -Duseroot=false \
        -Dbindir=${PREFIX}/bin \
        -Ddatadir=${PREFIX}/share \
        -Dincludedir=${PREFIX}/include \
        -Dlibdir=${PREFIX}/lib \
        -Dmandir=${PREFIX}/share/man \
        -Dsbindir=${PREFIX}/sbin \
        -Dsysconfdir=${PREFIX}/etc \
        -Dudevrulesdir=${PREFIX}/lib/udev/rules.d \
        -Dinitscriptdir=
    ninja
    ninja install
}


tmux () {
    [[ -e "${PREFIX}/tmux/bin/tmux" ]] && return

    cd "$TEMP_FOLDER"

    # libevent
    # ncurses

    # TMUX_VERSION=3.3a
    # [[ ! -e tmux-${TMUX_VERSION}.tar.gz ]] && wget -c https://ghproxy.com/https://github.com/tmux/tmux/releases/download/${TMUX_VERSION}/tmux-${TMUX_VERSION}.tar.gz
    # tar xvzf tmux-${TMUX_VERSION}.tar.gz
    # ./configure CFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" LDFLAGS="-L${PREFIX}/lib -L${PREFIX}/include/ncurses -L${PREFIX}/include"
    # CPPFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" LDFLAGS="-static -L${PREFIX}/include -L${PREFIX}/include/ncurses -L${PREFIX}/lib" make

    # ./configure \
    #     CFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" \
    #     LDFLAGS="-static -L${PREFIX}/include -L${PREFIX}/include/ncurses -L${PREFIX}/lib " \
    #     --prefix=${PREFIX}
    # make
    # cp tmux ${PREFIX}/bin
    # make clean

    sudo apt install -y libevent-dev

    git clone git@git.zhlh6.cn:tmux/tmux.git
    cd tmux
    sh autogen.sh
    ./configure --prefix="${PREFIX}/tmux" --enable-sixel
    make
    make install
}


ncdu () {
    [[ -e ${PREFIX}/bin/ncdu ]] && return

    cd ${TEMP_FOLDER}

    ncurses

    NCDU_VERSION=1.18.1
    [[ ! -e ncdu-${NCDU_VERSION}.tar.gz ]] && wget -c https://ghproxy.com/https://github.com/ysl2/ncdu/releases/download/v${NCDU_VERSION}/ncdu-${NCDU_VERSION}.tar.gz
    tar xvzf ncdu-${NCDU_VERSION}.tar.gz
    cd ncdu-${NCDU_VERSION}
    ./configure \
        CFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" \
        CPPFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" \
        CXXFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" \
        LDFLAGS="-L${PREFIX}/lib -Wl,--no-as-needed -ltinfow" \
        --prefix=${PREFIX}
    make
    make install
    make clean
}


lf () {
    cd "$TEMP_FOLDER"

    LF_VERSION=r31
    LF_TARNAME=lf-linux-amd64.tar.gz
    [ -e "$LF_TARNAME" ] && rm "$LF_TARNAME"
    wget -c "$GHPROXY"https://github.com/gokcehan/lf/releases/download/"${LF_VERSION}"/"${LF_TARNAME}"
    tar xvzf "$LF_TARNAME"
    mv lf "$PREFIX"
}


htop () {
    [[ -e ${PREFIX}/bin/htop ]] && return

    cd ${TEMP_FOLDER}

    ncurses

    HTOP_VERSION=3.2.2
    [[ ! -e htop-${HTOP_VERSION}.tar.xz ]] && wget -c https://ghproxy.com/https://github.com/htop-dev/htop/releases/download/${HTOP_VERSION}/htop-${HTOP_VERSION}.tar.xz
    tar xvf htop-${HTOP_VERSION}.tar.xz
    cd htop-${HTOP_VERSION}
    ./configure CFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" LDFLAGS="-L${PREFIX}/lib -L${PREFIX}/include/ncurses -L${PREFIX}/include" --disable-unicode --prefix=${PREFIX}
    CPPFLAGS="-I${PREFIX}/include -I${PREFIX}/include/ncurses" LDFLAGS="-static -L${PREFIX}/include -L${PREFIX}/include/ncurses -L${PREFIX}/lib" make
    make install
    make clean
}


gcc8 () {
    _ERR gcc8
    return

    # wget -c http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/gcc-8_8.4.0-3ubuntu2_amd64.deb
    # wget -c http://mirrors.edge.kernel.org/ubuntu/pool/universe/g/gcc-8/gcc-8-base_8.4.0-3ubuntu2_amd64.deb
    # wget -c http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/libgcc-8-dev_8.4.0-3ubuntu2_amd64.deb
    # wget -c http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/cpp-8_8.4.0-3ubuntu2_amd64.deb
    # wget -c http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/libmpx2_8.4.0-3ubuntu2_amd64.deb
    # wget -c http://mirrors.kernel.org/ubuntu/pool/main/i/isl/libisl22_0.22.1-1_amd64.deb

    # wget -c https://mirror.bjtu.edu.cn/ubuntu/pool/universe/g/gcc-8/gcc-8_8.4.0-3ubuntu2_amd64.deb
    # wget -c https://mirror.bjtu.edu.cn/ubuntu/pool/universe/g/gcc-8/gcc-8-base_8.4.0-3ubuntu2_amd64.deb
    # wget -c https://mirror.bjtu.edu.cn/ubuntu/pool/universe/g/gcc-8/libgcc-8-dev_8.4.0-3ubuntu2_amd64.deb
    # wget -c https://mirror.bjtu.edu.cn/ubuntu/pool/universe/g/gcc-8/cpp-8_8.4.0-3ubuntu2_amd64.deb
    # wget -c https://mirror.bjtu.edu.cn/ubuntu/pool/universe/g/gcc-8/libmpx2_8.4.0-3ubuntu2_amd64.deb
    # wget -c https://mirror.bjtu.edu.cn/ubuntu/pool/universe/g/gcc-8/libisl22_0.22.1-1_amd64.deb
    # sudo apt update
    # sudo apt install ./libisl22_0.22.1-1_amd64.deb ./libmpx2_8.4.0-3ubuntu2_amd64.deb ./cpp-8_8.4.0-3ubuntu2_amd64.deb ./libgcc-8-dev_8.4.0-3ubuntu2_amd64.deb ./gcc-8-base_8.4.0-3ubuntu2_amd64.deb ./gcc-8_8.4.0-3ubuntu2_amd64.deb

    # wget -c https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc/gcc-9.3.0/gcc-9.3.0.tar.gz
    # wget -c https://mirrors.tuna.tsinghua.edu.cn/gnu/mpc/mpc-1.1.0.tar.gz
    # wget -c https://mirrors.tuna.tsinghua.edu.cn/gnu/mpfr/mpfr-4.0.2.tar.gz
    # wget -c https://mirrors.tuna.tsinghua.edu.cn/gnu/gmp/gmp-6.1.2.tar.gz

    # binutils: https://mirrors.tuna.tsinghua.edu.cn/gnu/binutils/
    # gcc: https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc/
    # gmp: https://mirrors.tuna.tsinghua.edu.cn/gnu/gmp/
    # mpfr: https://mirrors.tuna.tsinghua.edu.cn/gnu/mpfr/
    # mpc: https://mirrors.tuna.tsinghua.edu.cn/gnu/mpc/
    # isl: https://mirrors.tuna.tsinghua.edu.cn/ubuntu/pool/main/i/isl-0.18/

    # https://www.ivistang.com/articles/336/
}


lazygit () {
    cd "$TEMP_FOLDER"

    LAZYGIT_VERSION=0.40.2
    mkdir -p lazygit-"$LAZYGIT_VERSION"
    cd lazygit-"$LAZYGIT_VERSION"
    wget -c "$GHPROXY"https://github.com/jesseduffield/lazygit/releases/download/v"$LAZYGIT_VERSION"/lazygit_"$LAZYGIT_VERSION"_Linux_x86_64.tar.gz
    tar xvzf lazygit_"$LAZYGIT_VERSION"_Linux_x86_64.tar.gz
    mkdir -p "$PREFIX"
    mv lazygit "$PREFIX"
}


neovim () {
    sudo apt-get install -y ninja-build gettext cmake unzip curl

    cd "${TEMP_FOLDER}"

    git clone git@"$GHSSH":neovim/neovim.git
    cd neovim && make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX="${PREFIX}"/neovim
    make install
}


termscp () {
    [ -e "$PREFIX"/termscp ] && return

    cd "$TEMP_FOLDER"

    TERMSCP_VERSION=v0.12.3
    [ ! -e termscp-$TERMSCP_VERSION-x86_64-unknown-linux-gnu.tar.gz ] && wget -c "$GHPROXY"https://github.com/veeso/termscp/releases/download/"$TERMSCP_VERSION"/termscp-"$TERMSCP_VERSION"-x86_64-unknown-linux-gnu.tar.gz
    tar xzvf termscp-"$TERMSCP_VERSION"-x86_64-unknown-linux-gnu.tar.gz
    mkdir -p "$PREFIX"
    mv termscp "$PREFIX"
}


brew () {
    /bin/bash -c "$(curl -fsSL "$GHPROXY"https://github.com/Homebrew/install/raw/master/install.sh)"
}


firacode () {
    [[ -e /usr/share/fonts/FiraCode ]] && return

    cd "${TEMP_FOLDER}"

    version=v3.0.2
    wget -c "$GHPROXY"https://github.com/ryanoasis/nerd-fonts/releases/download/${version}/FiraCode.zip
    unzip -d FiraCode FiraCode.zip
    sudo mv FiraCode /usr/share/fonts/
    sudo fc-cache -f -v
}


fzf () {
    cd
    git clone --depth=1 git@"$GHSSH":junegunn/fzf.git ~/.fzf
    cd ~/.fzf
    sed -i 's/url=/url=https:\/\/mirror.ghproxy.com\//g' install
    ./install
}


ants () {
    cd ${PREFIX}/bin
    mkdir -p ANTs
    cd ANTs
    [[ ! -e antsInstallExample ]] && git clone git@git.zhlh6.cn:cookpa/antsInstallExample.git
    cd antsInstallExample
    sed -i "17s/.*//; s/https:\/\/github.com\//git@git.zhlh6.cn:/g; 65s/.*/# sed -i \"s#https:\/\/github.com\/#git@git.zhlh6.cn:#g\; 7,13s#.*##; 1s#.*#return()#\" ..\/build\/ITKv5-prefix\/tmp\/ITKv5-gitclone.cmake\nsed -i \"1s#.*#return()#\" ..\/build\/ITKv5-prefix\/tmp\/ITKv5-gitclone.cmake\ngit clone --depth=1 git@git.zhlh6.cn:InsightSoftwareConsortium\/ITK.git ..\/build\/ITKv5\nsed -i \"s#\\\\\${git_protocol}:\/\/github.com\/#git@git.zhlh6.cn:#g\" ..\/build\/ITKv5\/Modules\/Remote\/MGHIO.remote.cmake ..\/build\/ITKv5\/Modules\/Remote\/AdaptiveDenoising.remote.cmake ..\/build\/ITKv5\/Modules\/Remote\/GenericLabelInterpolator.remote.cmake/g" installANTs.sh
    chmod 777 installANTs.sh
    cd ..
    ./antsInstallExample/installANTs.sh
}


cfw () {
    _ERR 'cfw not finished yet.'
    return

    [[ -e ${PREFIX}/bin/clash ]] && return
    cd ${TEMP_FOLDER}

    CLASH_VERSION=0.20.31
    [[ ! -e Clash.for.Windows-"${CLASH_VERSION}"-x64-linux.tar.gz ]] && wget -c https://ghproxy.com/https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.20.31/Clash.for.Windows-"${CLASH_VERSION}"-x64-linux.tar.gz
    tar xzvf Clash.for.Windows-"${CLASH_VERSION}"-x64-linux.tar.gz
    return
    mv clash ${PREFIX}/bin/_lib-clash

    cd ${PREFIX}/bin/_lib-clash
    # curl https://update.glados-config.com/clash/151876/763d7e4/82122/glados-terminal.yaml > glados.yaml
    mv clash*64* clash
    chmod +x clash

    cd ..
    ln -s _lib-clash/clash_ .
}


clash () {
    if [ ! -e "$PREFIX"/clash ]; then

        cd "$TEMP_FOLDER"

        CLASH_VERSION=v1.18.0
        wget -c https://ghproxy.com/https://github.com/Dreamacro/clash/releases/download/"${CLASH_VERSION}"/clash-linux-amd64-"${CLASH_VERSION}".gz
        gzip -d clash-linux-amd64-"${CLASH_VERSION}".gz
        chmod 777 clash-linux-amd64-"${CLASH_VERSION}"
        mv clash-linux-amd64-"${CLASH_VERSION}" "$PREFIX"/clash
    fi
    if [ -e ~/.config/clash/Country.mmdb ]; then
        mkdir -p ~/.config/clash
        cd ~/.config/clash

        CLASH_MMDB_VERSION=20231012

        wget -c https://ghproxy.com/https://github.com/Dreamacro/maxmind-geoip/releases/download/"${CLASH_MMDB_VERSION}"/Country.mmdb
    fi
}


proxychains () {
    [[ -e ${PREFIX}/bin/proxychains4 ]] && return

    cd ${TEMP_FOLDER}

    PROXYCHAINS_VERSION=4.16
    [[ ! -e proxychains-ng-${PROXYCHAINS_VERSION}.tar.xz ]] && wget -c https://ghproxy.com/https://github.com/rofl0r/proxychains-ng/releases/download/v${PROXYCHAINS_VERSION}/proxychains-ng-${PROXYCHAINS_VERSION}.tar.xz
    tar xvf proxychains-ng-${PROXYCHAINS_VERSION}.tar.xz
    cd proxychains-ng-${PROXYCHAINS_VERSION}
    ./configure --prefix=${PREFIX}
    make
    make install
    make clean

    cd ${PREFIX}/bin
}


libxmu () {
    _ERR 'libxmu: no package xext found.'
    return

    LIBXMU_VERSION=1.1.3

    cd ${TEMP_FOLDER}

    [[ ! -e libxmu_${LIBXMU_VERSION}.orig.tar.gz ]] && wget -c https://mirrors.tuna.tsinghua.edu.cn/ubuntu/pool/main/libx/libxmu/libxmu_${LIBXMU_VERSION}.orig.tar.gz
    tar xvzf libxmu_${LIBXMU_VERSION}.orig.tar.gz
    cd libXmu-${LIBXMU_VERSION}
    PKG_CONFIG_PATH="/usr/share/pkgconfig" \
    XMU_CFLAGS="-I/usr/include" \
    ./configure \
        --prefix=${PREFIX}
        # CPPFLAGS="-I/usr/include" \
        # CXXFLAGS="-I/usr/include" \
    make
    make install
    make clean
}


xclip () {
    _ERR 'xclip need libxmu first.'
    return

    [[ -e ${PREFIX}/bin/xclip ]] && return

    cd ${TEMP_FOLDER}

    XCLIP_VERSION=0.13
    [[ ! -e xclip-${XCLIP_VERSION}.tar.gz ]] && wget -c -O xclip-${XCLIP_VERSION}.tar.gz https://github.com/astrand/xclip/archive/refs/tags/${XCLIP_VERSION}.tar.gz
    tar xvzf xclip-${XCLIP_VERSION}.tar.gz
    cd xclip-${XCLIP_VERSION}
    autoreconf
    CFLAGS="-I${TEMP_FOLDER}/libXmu-1.1.3/include" \
    CPPFLAGS="-I${TEMP_FOLDER}/libXmu-1.1.3/include" \
    CXXFLAGS="-I${TEMP_FOLDER}/libXmu-1.1.3/include" \
    ./configure \
        --prefix=${PREFIX}
    CFLAGS="-I${TEMP_FOLDER}/libXmu-1.1.3/include" \
    CPPFLAGS="-I${TEMP_FOLDER}/libXmu-1.1.3/include" \
    CXXFLAGS="-I${TEMP_FOLDER}/libXmu-1.1.3/include" \
    make
    make install
    make install.man
}


lua () {
    cd "$TEMP_FOLDER"

    LUA_VERSION=v2.1
    git clone git@"$GHSSH":LuaJIT/LuaJIT.git -b "$LUA_VERSION"
    cd LuaJIT
    make
    mv src/luajit "$PREFIX"/lua
}


nvtop () {
    NVTOP_VERSION=3.0.2
    rm -rf "$PREFIX"/nvtop 2> /dev/null
    wget -c -O "$PREFIX"/nvtop "$GHPROXY"https://github.com/Syllo/nvtop/releases/download/"$NVTOP_VERSION"/nvtop-x86_64.AppImage
    chmod 777 "$PREFIX"/nvtop
}


chrome () {
    if command -v google-chrome &> /dev/null; then return; fi

    cd "${TEMP_FOLDER}"

    wget -c https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb &&
    sudo dpkg -i google-chrome-stable_current_amd64.deb
    [[ -e google-chrome-stable_current_amd64.deb ]] && rm -f google-chrome-stable_current_amd64.deb

    TEMP="
[Desktop Entry]
Name=Google Chrome
Type=Application
Exec=/usr/bin/google-chrome
Icon=/usr/share/icons/hicolor/48x48/apps/google-chrome.png
"
    echo "${TEMP}" > ~/Desktop/chrome.desktop
    [[ ! -e /usr/share/applications/chrome.desktop ]] && sudo ln -s ~/Desktop/chrome.desktop /usr/share/applications
}


gh () {
    [[ -e "${PREFIX}"/bin/github-desktop ]] && return

    GH_VERSION=3.3.1-linux1
    [[ ! -e "${PREFIX}"/bin/github-desktop ]] && wget -c -O "${PREFIX}"/bin/github-desktop https://ghproxy.com/https://github.com/shiftkey/desktop/releases/download/release-"${GH_VERSION}"/GitHubDesktop-linux-x86_64-"${GH_VERSION}".AppImage
    chmod 777 "${PREFIX}"/bin/github-desktop
    [[ ! -e "${PREFIX}"/bin/.github-desktop.png ]] && wget -c -O "${PREFIX}"/bin/.github-desktop.png https://avatars.githubusercontent.com/u/13171334

    TEMP="
[Desktop Entry]
Name=Github Desktop
Type=Application
Exec="${PREFIX}"/bin/github-desktop
Icon="${PREFIX}"/bin/.github-desktop.png
"
    echo "${TEMP}" > ~/Desktop/github-desktop.desktop
    [[ ! -e /usr/share/applications/github-desktop.desktop ]] && sudo ln -s ~/Desktop/github-desktop.desktop /usr/share/applications
}


dosbox () {
    # NOTE: Don't use `command -v dosbox &> /dev/null` to check if dosbox has already been installed, beacuse the function name is `dosbox`, and is same with the command.
    sudo apt install -y dosbox
    TEMP="
[Desktop Entry]
Name=Dosbox
Type=Application
Exec="$PREFIX"/bin/_/dosbox
Icon=/usr/share/icons/hicolor/256x256/apps/dosbox.png
"
    echo "$TEMP" > "$APP_FOLDER"/dosbox.desktop
    ln -s "$APP_FOLDER"/dosbox.desktop ~/Desktop 2> /dev/null
}


wakatime () {
    mkdir -p ~/.wakatime/
    cd ~/.wakatime/

    [[ -e wakatime-cli ]] && rm -f wakatime-cli
    [[ -e wakatime-cli-linux-amd64 ]] && rm -f wakatime-cli-linux-amd64
    [[ -e wakatime-cli-linux-amd64.zip ]] && rm -f wakatime-cli-linux-amd64.zip

    WAKATIME_VERSION=v1.81.0

    wget -c "$GHPROXY"https://github.com/wakatime/wakatime-cli/releases/download/"$WAKATIME_VERSION"/wakatime-cli-linux-amd64.zip
    unzip wakatime-cli-linux-amd64.zip
    ln -s wakatime-cli-linux-amd64 wakatime-cli
}


marksman () {
    [ -e "$PREFIX"/marksman ] && return

    MARKSMAN_VERSION=2023-07-25
    wget -c -O "$PREFIX"/marksman "$GHPROXY"https://github.com/artempyanykh/marksman/releases/download/"$MARKSMAN_VERSION"/marksman-linux-x64
    chmod 777 "$PREFIX"/marksman
}


texlab () {
    [[ -e "${PREFIX}"/bin/texlab ]] && return

    cd ${TEMP_FOLDER}

    TEXLAB_VERSION=v5.9.2
    wget -c https://ghproxy.com/https://github.com/latex-lsp/texlab/releases/download/"${TEXLAB_VERSION}"/texlab-x86_64-linux.tar.gz
    tar xvf texlab-x86_64-linux.tar.gz
    mv texlab "${PREFIX}"/bin/
}


coc_lua () {
    [[ -e ~/.config/coc/extensions/coc-sumneko-lua-data/sumneko-lua-ls/extension/server/bin/lua-language-server ]] && return

    cd ${TEMP_FOLDER}

    LUALS_VERSION=v3.7.0
    mkdir -p sumneko-lua-ls/
    cd sumneko-lua-ls/
    [[ ! -e vscode-lua-"${LUALS_VERSION}"-linux-x64.vsix ]] && wget -c https://ghproxy.com/https://github.com/LuaLS/vscode-lua/releases/download/"${LUALS_VERSION}"/vscode-lua-"${LUALS_VERSION}"-linux-x64.vsix
    unzip vscode-lua-"${LUALS_VERSION}"-linux-x64.vsix
    cd ..
    [[ -e ~/.config/coc/extensions/coc-sumneko-lua-data/ ]] && rm -rf ~/.config/coc/extensions/coc-sumneko-lua-data/
    mkdir -p ~/.config/coc/extensions/coc-sumneko-lua-data/
    mv sumneko-lua-ls/ ~/.config/coc/extensions/coc-sumneko-lua-data/
}


zathura () {
    _ERR zathura && return
    [[ -e "${PREFIX}"/bin/zathura ]] && return

    cd "${TEMP_FOLDER}"
    [[ ! -e zathura ]] && git clone git@git.zhlh6.cn:pwmt/zathura.git

    cd zathura

    # pip install meson ninja
    # sudo apt install libgtk-3-dev
    # sudo apt install libjson-glib-dev
    # sudo apt install libmagic-dev

    meson build --prefix="${PREFIX}"
    cd build
    ninja
    ninja install

    TEMP="
[Desktop Entry]
Name=Zathura
Type=Application
Exec="${PREFIX}"/bin/zathura
Icon="${PREFIX}"/share/icons/hicolor/256x256/apps/org.pwmt.zathura.png
"
    echo "${TEMP}" > ~/Desktop/zathura.desktop
    [[ -e /usr/share/applications/zathura.desktop ]] && sudo rm /usr/share/applications/zathura.desktop
    sudo ln -s ~/Desktop/zathura.desktop /usr/share/applications
}


shfmt () {
    SHFMT_VERSION=v3.7.0
    wget -c -O "$PREFIX"/shfmt "$GHPROXY"https://github.com/mvdan/sh/releases/download/"$SHFMT_VERSION"/shfmt_"$SHFMT_VERSION"_linux_amd64
    chmod 777 "$PREFIX"/shfmt
}


shellcheck () {
    cd "$TEMP_FOLDER"

    mkdir -p shellcheck
    cd shellcheck

    SHELLCHECK_VERSION=v0.9.0
    [[ ! -e shellcheck-"$SHELLCHECK_VERSION".linux.x86_64.tar.xz ]] && wget -c https://ghproxy.com/https://github.com/koalaman/shellcheck/releases/download/"$SHELLCHECK_VERSION"/shellcheck-"$SHELLCHECK_VERSION".linux.x86_64.tar.xz
    tar xvf shellcheck-"$SHELLCHECK_VERSION".linux.x86_64.tar.xz
    mv shellcheck-"$SHELLCHECK_VERSION"/shellcheck "$PREFIX"
}


alacritty () {
    if ! command -v cargo &> /dev/null; then
        sudo apt-get install curl
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
        rustup override set stable
        rustup update stable
        sudo apt install -y cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3
    fi

    cd "$TEMP_FOLDER"

    ALACRITTY_VERSION=v0.12.1
    git clone git@"$GHSSH":ysl2/alacritty-sixel.git alacritty
    cd alacritty

    cargo build --release
    mv target/release/alacritty "$PREFIX"/
    wget -c -O "$APP_FOLDER"/Alacritty.desktop "$GHPROXY"https://github.com/alacritty/alacritty/releases/download/"${ALACRITTY_VERSION}"/Alacritty.desktop
    sed -i 's/Exec=alacritty/Exec=\/home\/yusongli\/.vocal\/alacritty/g' "$APP_FOLDER"/Alacritty.desktop
    ln -s "$APP_FOLDER"/Alacritty.desktop ~/Desktop
}


nodejs () {
    cd "$TEMP_FOLDER"

    NODE_VERSION=v18.18.0
    wget -c https://nodejs.org/dist/"$NODE_VERSION"/node-"$NODE_VERSION"-linux-x64.tar.xz
    tar xvf node-"$NODE_VERSION"-linux-x64.tar.xz
    mv node-"$NODE_VERSION"-linux-x64/ "$PREFIX"/nodejs/
}


trans () {
    TRANS_VERSION=0.9.7.1
    TARGET_FOLDER_NAME=translate-shell-"$TRANS_VERSION"
    TARGET_FOLDER_PATH="$PREFIX"/"$TARGET_FOLDER_NAME"/bin
    [ -e "$TARGET_FOLDER_PATH" ] && return
    mkdir -p "$TARGET_FOLDER_PATH"

    cd "$TEMP_FOLDER"

    wget -c -O translate-shell-v"$TRANS_VERSION".tar.gz "$GHPROXY"/https://github.com/soimort/translate-shell/archive/refs/tags/v"$TRANS_VERSION".tar.gz
    tar xvf translate-shell-v"$TRANS_VERSION".tar.gz
    mv translate-shell-"$TRANS_VERSION"/* "$TARGET_FOLDER_PATH"
    ln -s "$TARGET_FOLDER_PATH"/translate "$TARGET_FOLDER_PATH"/trans
}


joshuto () {
    INSTALL_PREFIX="${PREFIX}"/bin \
    bash <(curl -s https://ghproxy.com/https://raw.githubusercontent.com/kamiyaa/joshuto/master/utils/install.sh | sed 's#ARCHIVE_URL="#ARCHIVE_URL="https://ghproxy.com/#g')
}


kitty () {
    [ -e ~/.local/kitty.app ] && return
    mkdir -p ~/.local/kitty.app
    cd ~/.local/kitty.app

    KITTY_VERSION=0.30.0
    wget -c https://ghproxy.com/https://github.com/kovidgoyal/kitty/releases/download/v"${KITTY_VERSION}"/kitty-"${KITTY_VERSION}"-x86_64.txz
    tar xvf kitty-"${KITTY_VERSION}"-x86_64.txz
    # Create symbolic links to add kitty and kitten to PATH (assuming ~/.local/bin is in
    # your system-wide PATH)
    # ln -s ~/.local/kitty.app/ "${PREFIX}"/bin/
    mkdir -p ~/.local/share/applications
    # Place the kitty.desktop file somewhere it can be found by the OS
    cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/
    # sudo ln -s ~/.local/kitty.app/share/applications/kitty.desktop /usr/share/applications/
    # If you want to open text files and images in kitty via your file manager also add the kitty-open.desktop file
    cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/
    # sudo ln -s ~/.local/kitty.app/share/applications/kitty-open.desktop /usr/share/applications/
    # Update the paths to the kitty and its icon in the kitty.desktop file(s)
    sed -i "s|Icon=kitty|Icon=/home/$USER/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty*.desktop
    sed -i "s|Exec=kitty|Exec=/home/$USER/.local/kitty.app/bin/kitty --start-as maximized|g" ~/.local/share/applications/kitty*.desktop
}


ascii () {
    ASCII_VERSION=v1.13.1
    cd "${TEMP_FOLDER}"
    mkdir ascii
    cd ascii
    wget -c https://ghproxy.com/https://github.com/TheZoraiz/ascii-image-converter/releases/download/"${ASCII_VERSION}"/ascii-image-converter_Linux_amd64_64bit.tar.gz
    tar xvf ascii-image-converter_Linux_amd64_64bit.tar.gz
    mv ascii-image-converter_Linux_amd64_64bit/ascii-image-converter "${PREFIX}"/bin/
}


wezterm () {
    _ERR 'wezterm'
    [[ -e "${PREFIX}/wezterm" ]] && return
    cd "${TEMP_FOLDER}"
    # wget -c 'https://github.com/wez/wezterm/releases/download/nightly/wezterm-nightly.Ubuntu20.04.tar.xz'
    tar xvf 'wezterm-nightly.Ubuntu20.04.tar.xz'
}


chafa () {
    cd "$TEMP_FOLDER"

    CHAFA_VERSION=1.12.5

    # Option 1: Install from release (no svg support):
    # wget -c "$GHPROXY"https://github.com/ysl2/chafa/releases/download/"${CHAFA_VERSION}"/chafa-"${CHAFA_VERSION}"-1-x86_64-linux-gnu.tar.gz
    # tar xvf chafa-"${CHAFA_VERSION}"-1-x86_64-linux-gnu.tar.gz
    # mv chafa-"${CHAFA_VERSION}"-1-x86_64-linux-gnu/chafa "${PREFIX}"/

    # Option 2: Install from source (no webp support, beacuse it will report error when compiling):
    sudo apt-get install -y libfreetype-dev libjpeg-dev librsvg2-dev libtiff5-dev gtk-doc-tools libmagickwand-dev
    [ -d chafa ] && rm -rf chafa
    git clone git@"$GHSSH":hpjansson/chafa.git -b "$CHAFA_VERSION"
    cd chafa
    ./autogen.sh --enable-gtk-doc --without-webp
    make
    sudo make install
}


clang() {
    _ERR 'Use clangd instead.'
    return
    [ -e "$PREFIX"/clang/bin/clang ] && return

    cd "$TEMP_FOLDER"

    CLANG_VERSION=16.0.4
    wget -c https://ghproxy.com/https://github.com/llvm/llvm-project/releases/download/llvmorg-"${CLANG_VERSION}"/clang+llvm-"${CLANG_VERSION}"-x86_64-linux-gnu-ubuntu-22.04.tar.xz
    tar xvf clang+llvm-"${CLANG_VERSION}"-x86_64-linux-gnu-ubuntu-22.04.tar.xz
    mv clang+llvm-"${CLANG_VERSION}"-x86_64-linux-gnu-ubuntu-22.04 "$PREFIX"/clang
}


clangd() {
    [ -e "$PREFIX"/clangd/bin/clangd ] && return

    cd "$TEMP_FOLDER"

    CLANGD_VERSION=16.0.2
    wget -c https://ghproxy.com/https://github.com/clangd/clangd/releases/download/"$CLANGD_VERSION"/clangd-linux-"$CLANGD_VERSION".zip
    unzip clangd-linux-"$CLANGD_VERSION".zip
    mv clangd_"$CLANGD_VERSION" "$PREFIX"/clangd
}


smu() {
    cd "$TEMP_FOLDER"
    git clone git@git.zhlh6.cn:Gottox/smu.git
    cd smu
    make PREFIX="$PREFIX"/smu install
}


picom() {
    [ -e "$PREFIX"/picom ] && return

    cd "$TEMP_FOLDER"

    sudo apt install -y libconfig-dev libdbus-1-dev libegl-dev libev-dev libgl-dev libpcre2-dev libpixman-1-dev libx11-xcb-dev libxcb1-dev libxcb-composite0-dev libxcb-damage0-dev libxcb-dpms0-dev libxcb-glx0-dev libxcb-image0-dev libxcb-present-dev libxcb-randr0-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-shape0-dev libxcb-util-dev libxcb-xfixes0-dev libxext-dev meson ninja-build uthash-dev libepoxy-dev
    git clone git@"$GHSSH":yshui/picom.git
    cd picom
    meson setup --buildtype=release build
    ninja -C build
    mv build/src/picom "$PREFIX"
}


tdrop() {
    cd "$TEMP_FOLDER"
    git clone git@git.zhlh6.cn:noctuid/tdrop.git
    cd tdrop
    sudo make install
}


bluetuith() {
    cd "$TEMP_FOLDER"
    mkdir -p bluetuith
    cd bluetuith

    BLUETUITH_VERSION=0.1.8

    wget -c "$GHPROXY"https://github.com/darkhz/bluetuith/releases/download/v"${BLUETUITH_VERSION}"/bluetuith_"${BLUETUITH_VERSION}"_Linux_x86_64.tar.gz
    tar xvf bluetuith_"${BLUETUITH_VERSION}"_Linux_x86_64.tar.gz
    mv bluetuith "$PREFIX"
}


gh() {
    _ERR gh
    return
    cd "$TEMP_FOLDER"
    wget -c https://ghproxy.com/https://github.com/cli/cli/releases/download/v2.38.0/gh_2.38.0_linux_amd64.tar.gz
}


i3() {
    sudo apt-get install libstartup-notification0-dev libxcb-xkb-dev libxcb-xinerama0-dev libxcb-cursor-dev libxcb-keysyms1-dev libxcb-icccm4-dev libxcb-xrm-dev libxkbcommon-x11-dev libyajl-dev meson ninja-build libxcb-randr0-dev libxcb-shape0-dev libpcre2-dev libcairo2-dev libpango1.0-dev libev-dev

    cd "$TEMP_FOLDER"

    [ -d i3 ] && rm -rf i3
    git clone git@"$GHSSH":i3/i3.git

    cd i3
    mkdir -p build && cd build
    meson ..
    ninja

    cd ..
    [ -d "$PREFIX"/lib-i3 ] && rm -rf "$PREFIX"/lib-i3
    mv build "$PREFIX"/lib-i3
    [ ! -f "$PREFIX"/i3 ] && ln -s "$PREFIX"/lib-i3/i3 "$PREFIX"/i3
    [ ! -f "$PREFIX"/i3-config-wizard ] && ln -s "$PREFIX"/lib-i3/i3-config-wizard "$PREFIX"/i3-config-wizard
    [ ! -f "$PREFIX"/i3-dump-log ] && ln -s "$PREFIX"/lib-i3/i3-dump-log "$PREFIX"/i3-dump-log
    [ ! -f "$PREFIX"/i3-input ] && ln -s "$PREFIX"/lib-i3/i3-input "$PREFIX"/i3-input
    [ ! -f "$PREFIX"/i3-msg ] && ln -s "$PREFIX"/lib-i3/i3-msg "$PREFIX"/i3-msg
    [ ! -f "$PREFIX"/i3-nagbar ] && ln -s "$PREFIX"/lib-i3/i3-nagbar "$PREFIX"/i3-nagbar
    [ ! -f "$PREFIX"/i3bar ] && ln -s "$PREFIX"/lib-i3/i3bar "$PREFIX"/i3bar
}


i3blocks() {
    sudo apt-get install autoconf
    cd "$TEMP_FOLDER"
    git clone git@"$GHSSH":vivien/i3blocks.git
    cd i3blocks
    ./autogen.sh
    ./configure
    make
    sudo make install
}


polybar() {
    _ERR polybar
    return
    sudo apt install -y build-essential git cmake cmake-data pkg-config python3-sphinx python3-packaging libuv1-dev libcairo2-dev libxcb1-dev libxcb-util0-dev libxcb-randr0-dev libxcb-composite0-dev xcb-proto libxcb-image0-dev libxcb-ewmh-dev libxcb-icccm4-dev libxcb-xkb-dev libxcb-xrm-dev libxcb-cursor-dev libasound2-dev libpulse-dev i3-wm libjsoncpp-dev libmpdclient-dev libcurl4-openssl-dev libnl-genl-3-dev libpthread-stubs0-dev
    # # python3-xcbgen
    #
    cd "$TEMP_FOLDER"

    git clone --recursive git@github.com:polybar/polybar.git
    cd polybar

    [ -d build ] && sudo rm -rf build
    mkdir build
    cd build
    [ -f CMakeCache.txt ] && rm CMakeCache.txt
    cmake ..
    make -j$(nproc)
    sudo make install
}


lemonbar() {
    _ERR lemonbar
    return
    cd "$TEMP_FOLDER"

    # git clone git@github.com:LemonBoy/bar.git lemonbar
    # cd lemonbar
    # sudo make clean install
    # mv lemonbar "$PREFIX"/

    pip install i3ipc
    mkdir -p ~/.i3/lemonbar && git clone git@github.com:mirekys/i3-lemonbar.git ~/.i3/lemonbar
}


awesome() {
    # Ref: https://www.reddit.com/r/awesomewm/comments/xi6ab5/installing_awesomewm/
    sudo apt install -y cmake make gcc lua5.2 liblua5.3-dev lua-busted lua-discount lua-ldoc lua-lgi lua5.3 asciidoctor debhelper-compat  imagemagick libcairo2-dev libdbus-1-dev libgdk-pixbuf2.0-dev libglib2.0-dev libpango1.0-dev libstartup-notification0-dev libx11-xcb-dev libxcb-cursor-dev libxcb-icccm4-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-util0-dev libxcb-xinerama0-dev libxcb-xkb-dev libxcb-xrm-dev libxcb-xtest0-dev libxdg-basedir-dev libxkbcommon-dev libxkbcommon-x11-dev x11proto-core-dev xmlto zsh  build-essential dbus-x11 gir1.2-gtk-3.0 libxcb-icccm4-dev libxcb-util0-dev libxcb1-dev x11-apps x11-utils x11-xserver-utils xfonts-base xterm xvfb libxcb-xfixes0-dev

    cd "$TEMP_FOLDER"
    git clone git@github.com:awesomeWM/awesome.git
    cd awesome
    make
    sudo make install
}


qlite() {
    _ERR qlite
    /usr/bin/python -m pip install xcffib
    /usr/bin/python -m pip install --no-cache-dir cairocffi
    /usr/bin/python -m pip install qtile
}


qrcp() {
    cd "$TEMP_FOLDER"

    QRCP_VERSION=0.10.1

    mkdir qrcp
    cd qrcp
    wget -c "$GHPROXY"https://github.com/claudiodangelis/qrcp/releases/download/"${QRCP_VERSION}"/qrcp_"${QRCP_VERSION}"_linux_x86_64.tar.gz
    tar xvf qrcp_"${QRCP_VERSION}"_linux_x86_64.tar.gz
    mv qrcp "$PREFIX"
}


etcher () {
    ETCHER_VERSION=1.18.11
    wget -c -O "$PREFIX"/etcher "$GHPROXY"https://github.com/balena-io/etcher/releases/download/v"${ETCHER_VERSION}"/balenaEtcher-"${ETCHER_VERSION}"-x64.AppImage
    chmod 777 "$PREFIX"/etcher
}


starship() {
    if [ -n "$GHPROXY" ]; then
        curl -sS https://ghproxy.com/https://raw.githubusercontent.com/starship/starship/master/install/install.sh | \
        sed 's/https\:\/\/github\.com/https\:\/\/ghproxy\.com\/https\:\/\/github\.com/g' | \
        sed 's/BIN_DIR=\/usr\/local\/bin/BIN_DIR=$MYLOCAL/g' | sh
    else
        curl -sS https://raw.githubusercontent.com/starship/starship/master/install/install.sh | \
        sed 's/BIN_DIR=\/usr\/local\/bin/BIN_DIR=$MYLOCAL/g' | sh
    fi
}


dragon() {
    sudo apt-get install -y libgtk-3-dev
    cd "$TEMP_FOLDER"
    git clone git@"$GHSSH":mwh/dragon.git
    cd dragon
    make
    mv dragon "$PREFIX"
}


niicat() {
    git clone git@"$GHSSH":ysl2/niicat.git "$PREFIX"/niicat
    cd "$PREFIX"/niicat
    pip install -r requirements.txt
}


itksnap() {
    cd "$TEMP_FOLDER"
    mkdir itksnap
    cd itksnap
    ITKSNAP_VERSION=4.0.2
    wget -c "$GHPROXY"https://github.com/ysl2/itksnap/releases/download/v"$ITKSNAP_VERSION"/itksnap-"$ITKSNAP_VERSION"-Linux-gcc64.tar.gz
    tar xvf itksnap-"$ITKSNAP_VERSION"-Linux-gcc64.tar.gz
    mv "$(ls | grep -v tar)" "$PREFIX"/itksnap
}


golang() {
    cd "$TEMP_FOLDER"

    GO_VERSION=1.21.5
    wget -c https://go.dev/dl/go"$GO_VERSION".linux-amd64.tar.gz
    tar xvf go"$GO_VERSION".linux-amd64.tar.gz
    mv go "$PREFIX"/golang
}


darkman() {
    cd "$TEMP_FOLDER"
    git clone https://gitlab.com/WhyNotHugo/darkman.git
    cd darkman
    DARKMAN_VERSION="$(git describe --tags --dirty 2>/dev/null || echo 0.0.0-dev)"
    go build -ldflags "-X main.Version=${DARKMAN_VERSION}" ./cmd/darkman
    sed -i 's/go /echo go /' Makefile
    sudo make install
}


drawio() {
    DRAWIO_VERSION=22.1.11
    wget -c -O "$PREFIX"/drawio "$GHPROXY"https://github.com/jgraph/drawio-desktop/releases/download/v"${DRAWIO_VERSION}"/drawio-x86_64-"${DRAWIO_VERSION}".AppImage
    chmod 777 "$PREFIX"/drawio
}


bfg() {
    sudo apt install -y openjdk-22-jdk
    cd "$PREFIX"

    BFG_VERSION=1.14.0
    wget -c -O bfg.jar https://repo1.maven.org/maven2/com/madgag/bfg/"$BFG_VERSION"/bfg-"$BFG_VERSION".jar
}


cajviewer() {
    cd "$TEMP_FOLDER"
    wget -c https://download.cnki.net/cajviewer_1.3.22-1_amd64.deb
    sudo dpkg -i cajviewer_1.3.22-1_amd64.deb
}


tesseract() {
    # Option 1: Install from source
    # TESSERACT_VERSION=5.3.3
    # wget -c -O "$PREFIX"/tesseract "$GHPROXY"https://github.com/AlexanderP/tesseract-appimage/releases/download/v"$TESSERACT_VERSION"/tesseract-"$TESSERACT_VERSION"-x86_64.AppImage
    # chmod 777 "$PREFIX"/tesseract

    # Option 2: Install from apt
    # Note: Debian has already installed tesseract-ocr by default, so we don't need to re-install it again.
    # sudo apt install -y tesseract-ocr libtesseract5-dev tesseract-ocr-chi-sim tesseract-ocr-eng

    # Install traneddatas
    mkdir -p "$PREFIX"/tessdata_best
    wget -c -O "$PREFIX"/tessdata_best/chi_sim.traineddata https://raw.githubusercontent.com/tesseract-ocr/tessdata_best/main/chi_sim.traineddata
    wget -c -O "$PREFIX"/tessdata_best/eng.traineddata https://raw.githubusercontent.com/tesseract-ocr/tessdata_best/main/eng.traineddata
    wget -c -O "$PREFIX"/tessdata_best/osd.traineddata https://raw.githubusercontent.com/tesseract-ocr/tessdata_best/main/osd.traineddata
    wget -c -O "$PREFIX"/tessdata_best/equ.traineddata https://raw.githubusercontent.com/tesseract-ocr/tessdata_best/main/equ.traineddata
}


wps() {
    # Install wps
    sudo apt install -y wps-office

    cd "$TEMP_FOLDER"

    # Downgrade dependencies to fix bold font error.
    wget -c https://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/f/freetype/libfreetype6_2.12.1%2Bdfsg-5_amd64.deb
    sudo dpkg -i libfreetype6_2.12.1+dfsg-5_amd64.deb
    wget -c https://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/f/freetype/libfreetype-dev_2.12.1%2Bdfsg-5_amd64.deb
    sudo dpkg -i libfreetype-dev_2.12.1+dfsg-5_amd64.deb

    # Ref: https://askubuntu.com/questions/18654/how-to-prevent-updating-of-a-specific-package
    # Disable dpkg auto update
    echo "libfreetype6 hold" | sudo dpkg --set-selections
    echo "libfreetype-dev hold" | sudo dpkg --set-selections
    # Disable apt auto update
    sudo apt-mark hold libfreetype6
    sudo apt-mark hold libfreetype-dev

    # Install wps fonts
    git clone git@"$GHSSH":dv-anomaly/ttf-wps-fonts.git
    sudo mkdir /usr/share/fonts/wps-fonts
    sudo chmod 644 /usr/share/fonts/wps-fonts/*
    sudo fc-cache -vfs
}


typst() {
    cd "$TEMP_FOLDER"
    TYPST_VERSION=v0.10.0
    wget -c "$GHPROXY"https://github.com/typst/typst/releases/download/"$TYPST_VERSION"/typst-x86_64-unknown-linux-musl.tar.xz
    tar xvf typst-x86_64-unknown-linux-musl.tar.xz
    mv typst-x86_64-unknown-linux-musl/typst "$PREFIX"
}


typst_lsp() {
    TYPST_LSP_VERSION=v0.13.0
    wget -c -O "$PREFIX"/typst-lsp "$GHPROXY"https://github.com/nvarner/typst-lsp/releases/download/"$TYPST_LSP_VERSION"/typst-lsp-x86_64-unknown-linux-gnu
    chmod 777 "$PREFIX"/typst-lsp
}


typstfmt() {
    TYPSTFMT=0.2.7
    cd "$TEMP_FOLDER"
    wget -c "$GHPROXY"https://github.com/astrale-sharp/typstfmt/releases/download/"$TYPSTFMT"/typstfmt-x86_64-unknown-linux-musl.tar.xz
    tar xvf typstfmt-x86_64-unknown-linux-musl.tar.xz
    mv typstfmt-x86_64-unknown-linux-musl/typstfmt "$PREFIX"
}


nvim_typst_preview() {
    FOLDER=~/.local/share/nvim/typst-preview
    mkdir -p "$FOLDER"
    cd "$FOLDER"

    TYPST_PREVIEW_VERSION=v0.10.4
    TYPST_PREVIEW_NAME=typst-preview-linux-x64
    TYPST_PREVIEW_URL=https://github.com/Enter-tainer/typst-preview/releases/download/"$TYPST_PREVIEW_VERSION"/"$TYPST_PREVIEW_NAME"
    wget -c "$GHPROXY""$TYPST_PREVIEW_URL"
    chmod 777 "$TYPST_PREVIEW_NAME"
    ln -s "$FOLDER"/"$TYPST_PREVIEW_NAME" "$PREFIX"/typst-preview

    WEBSOCAT_VERSION=v1.12.0
    WEBSOCAT_NAME=websocat.x86_64-unknown-linux-musl
    WEBSOCAT_URL=https://github.com/vi/websocat/releases/download/"$WEBSOCAT_VERSION"/"$WEBSOCAT_NAME"
    wget -c "$GHPROXY""$WEBSOCAT_URL"
    chmod 777 "$WEBSOCAT_NAME"

    echo -e "${TYPST_PREVIEW_URL}\n${WEBSOCAT_URL}" > version_record.txt
}


typstudio() {
    wget -c -O "$PREFIX"/typstudio "$GHPROXY"https://github.com/Cubxity/typstudio/releases/download/v0.1.0-dev.32/typstudio_0.1.0_amd64.AppImage
    chmod 777 "$PREFIX"/typstudio
}


miniconda() {
    cd "$TEMP_FOLDER"
    wget -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py311_23.11.0-1-Linux-x86_64.sh
    sh Miniconda3-py311_23.11.0-1-Linux-x86_64.sh -b -p "$PREFIX"/miniconda3
}


neovide() {
    NEOVIDE_VERSION=0.12.2
    wget -c -O "$PREFIX"/neovide "$GHPROXY"https://github.com/neovide/neovide/releases/download/"$NEOVIDE_VERSION"/neovide.AppImage
    chmod 777 "$PREFIX"/neovide
}


nix() {
    sh <(curl https://mirrors.tuna.tsinghua.edu.cn/nix/latest/install) --daemon
}


ngrams() {
    mkdir -p ~/.ngrams
    cd ~/.ngrams
    wget -c https://languagetool.org/download/ngram-data/ngrams-en-20150817.zip
    unzip ngrams-en-20150817.zip && rm ngrams-en-20150817.zip
}


tinymist() {
    TINYMIST_VERSION=v0.11.10
    TARGET=~/.vocal/tinymist
    wget -c -O "$TARGET" "$GHPROXY"https://github.com/Myriad-Dreamin/tinymist/releases/download/"$TINYMIST_VERSION"/tinymist-linux-x64
    chmod 777 "$TARGET"
}


if [[ -z $1 ]]; then
    echo 'Please select an item to install:'
    echo ''

    # Get all function names in the script
    function_names=$(grep -E '^\s*function\s+' "$0" | awk '{print $2}' | grep -v '^_')

    # Print the function names
    for func_name in $function_names; do
      echo "$func_name"
    done
fi

while [[ ! -z $1 ]]; do
    eval "$1"
    shift
done

# cleanup
# rm -rf ${TEMP_FOLDER}
